stages:
  - build
  - prepare
  - deploy

variables:
  # Set your Go version
  GO_VERSION: "1.20"

before_script:
  # Install Go
  - apt-get update && apt-get install -y wget
  - wget https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz
  - tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
  - export PATH=$PATH:/usr/local/go/bin

build:
  stage: build
  script:
    - go version # Check Go version to verify it's installed
    - go mod tidy # Clean up any dependencies
    - go build -o challenge_server main.go # Adjust this based on your directory structure
  artifacts:
    paths:
      - challenge_server # Save the built binary as an artifact


prepare:
  stage: prepare
  variables:
    SECURE_FILES_DOWNLOAD_PATH: './'
  script:
    # Copy Secure files for EC2 Key
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
  artifacts:
    paths:
      - home.pem

deploy:
  stage: deploy
  script: 
    # Copy the server binary to the EC2 instance using SCP
    - scp -o StrictHostKeyChecking=no -i home.pem challenge_server ec2-user@ec2-18-189-186-8.us-east-2.compute.amazonaws.com:/home/ec2-user/challenge_server
    # SSH into the EC2 instance and start/restart the server
    - ssh -o StrictHostKeyChecking=no -i home.pem ec2-user@ec2-18-189-186-8.us-east-2.compute.amazonaws.com << 'EOF'
      # Kill the previous instance of the server (if it's running)
    - pkill -f challenge_server || true
      # Give executable permissions
    - chmod +x /home/ec2-user/challenge_server
      # Start the server in the background
    - nohup /home/ec2-user/challenge_server > /dev/null 2>&1 &
    - EOF
  only:
    - main